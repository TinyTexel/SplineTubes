splines/tubes:
> 

- Rendering Tubes from Discrete Curves Using Hardware Tessellation
link: https://www.researchgate.net/publication/254311397_Rendering_Tubes_from_Discrete_Curves_Using_Hardware_Tessellation
(kindly provided by Alberto Raposo)
notes:
~ sequence of points define curve -> interpolated with Catmull-Rom splines
~ points are sent to GPU, geometry created in hull-shader/tessellator/domain-shader
~ approx the curve with linear segments, adaptively adds more segments in regions with large derivatives
~ LOD reduces only cross-section vertex count down to three (triangular cross-section)
~ radius is scaled up over distance to reduce aliasing 
	~> apparently no MSAA is used in addition but AA is supposedly eliminated (?)
	~> also no opacity reduction applied when reaching sub-pixel diameters
~ benchmark compares the tessellator-approach to a naive one where the geo is generated on CPU and send to GPU
	~> strongly reduced banwidth requirements
~ AA approach (scaling radius) is compared to no AA (benchmark in fps *sigh*)
	~> nearly no fps drop
	

- Rendering Generalized Cylinders using the A-Buffer
link: http://www.neulander.org/work/thesis.pdf
notes:
~ dynamic adaptive screne-space tessellation of curves with varying radii
~ using an A-Buffer for AA purposes (also adaptively supersamples its Phong lighting model)
~ software-based implementation
~ positions und radii are interpolated using cubic splines (Catmull-Rom)
~ other properties like color, opacity, reflectance are linearly interpolated 
~ coarse tessellation followed by length- and breadthwise refinement using different constraints
~ position constraint I: based on the angle between the screenspace tangent vectors of start/end-point of sub-segment
~ position constraint II: maintains a desired degree of linearity in the z-component
  ~> necessary to ensure that a curved segment is adequately subdivided even when viewed from an angle 
     that makes its screen pro jection close to linear (important for quality of normales and texcoords)
~ radius contraint: ensure smooth variation in the radius of a segment
~ inflection point constraint: ensures that inflection point lie between sub-segment (on their vertices)
~ 3 quality levels for breadthwise refinement, higher levels better approximate tube
  ~> chosen depending on screenspace size and quality requirements
~ backface culling for each segment
~ normal calculation must consider changing radius
~ high screenspace curvature can lead to ill-formed polygons
  ~> handled by splitting the offending polygon into an equivalent pair of triangles
~ variety of effects like length- and breadthwise opacity variation and a global illumination model that approx AO based 
on the assumption that the paintstroke (tube) is embedded in a layer of a homogeneous medium
~ benchmarks are pretty deprecated (thesis from 1997), render times given in ticks (s/60, still better than fps...)
~ overall approach appears annoyingly fiddly 

	 
ray-casting:
>

- Ray tracing Maya Hair and Fur
link: http://www.cse.chalmers.se/~uffe/xjobb/MayaHair.pdf
notes: 
~ subdiv in linear segments with varying radius

- Tron, Volumetric Lines, and Meshless Tubes Hilbert Cubed Sphere
link: http://prideout.net/blog/?p=61
notes:
~ linear segments...


- A Recursive Taylor Method for Ray-Casting Algebraic Surfaces
link: http://ralph.cs.cf.ac.uk/papers/Geometry/RayCast.pdf
notes:

~ approaches to numerically solve 4th and 6th degree equations are required to directly ray-cast quadratic and cubic splines, respectively
- http://scicomp.stackexchange.com/questions/3202/solution-of-quartic-equation (stable quadratic roots)
- http://stackoverflow.com/questions/6562867/specialised-algorithm-to-find-positive-real-solutions-to-quartic-equations :
 - https://en.wikipedia.org/wiki/Durand%E2%80%93Kerner_method (looks simple and nice, might do ~> nope, it doesnt :(, req too many iterations
 which makes it way too slow, and still doesnt find the roots in some cases)
 - https://en.wikipedia.org/wiki/Jenkins%E2%80%93Traub_algorithm (probably too heavy for shaders (https://github.com/sweeneychris/RpolyPlusPlus))
 - https://en.wikipedia.org/wiki/Newton%27s_method (very simple, too many problems)

- different idea: binary search between local extrema where one extremum is positiv and one negative; 
		  requires the extrema to be given -> can be determined by root finding on the derivatives, 
		  analytically for 2nd degree or same approach applied again
		  -> doesnt that converge exponentially?
		  -> is there a name for this approach?
		  - there is also no need to search for all roots, just those relevant for the (potential) front (or back) intersections

~ analytic evaluation of the discriminant of a 4th degree equation turns out to be numerically instable (and also quite heavy), 
need other early-out criterium like rasterized proxy geo (non trivial to ensure that the spline is fully enclosed, 
also not nice for non-primary rays)
~ no discriminant available for cubic spline (6th degree poly) -> can the existance of roots be determined differently?		  


adaptive tessellation:
>


shading:
>

~ curvature for AO and/or SSS approximations
- Pre-Integrated Skin Shading
link: http://advances.realtimerendering.com/s2011/Penner%20-%20Pre-Integrated%20Skin%20Rendering%20(Siggraph%202011%20Advances%20in%20Real-Time%20Rendering%20Course).pptx
link: http://simonstechblog.blogspot.de/2015/02/pre-integrated-skin-shading.html

~ having a ray-casting routine at hand, implementing a specular transmission/reflection model with ray-tracing would be nice...


texturing:
>

~ cross hatching perhaps...



random:
> things one finds (interesting):

- Interactive Ray Casting of Geodesic Grids
link: http://vis.cs.ucdavis.edu/papers/EuroVis13_Xie.pdf

- Realtime GPU-Raycasting of Volume Data with Smooth Splines on Tetrahedral Partitions
link: http://www.gris.informatik.tu-darmstadt.de/~dwodniok/files/wodniok_thesis.pdf

- GPU-based Visualisation of Protein Secondary Structure
link: http://www.vis.uni-stuttgart.de/uploads/tx_vispublications/TPCG08-krone-s.pdf

- Extending the graphic pipeline with new GPU-accelerated primitives
link: http://alice.loria.fr/publications/papers/2004/ray_tracing_gpu/gpu_accelerated_primitives.pdf
~ basic ray-casting (quadrics, no curved tubes)

- Jim Blinn's Corner: A trip down the graphics pipeline - Optimal Tubes
~ viewspace proxy geometry for cylinders 

