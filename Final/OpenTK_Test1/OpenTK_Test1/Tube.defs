#ifndef TUBE_DEFS
#define TUBE_DEFS

#define WIP 0
#define COLOR 1
#define SMOOTH_NORMAL 2
#define HARD_NORMAL 3
#define HARD_NORMAL_WF 4
#define BLUE_WF 5
#define LIT_COLOR 6

// #define VRING_VERTEX_COUNT 8
// #define VRING_COUNT 32

// #define USE_PER_VERTEX_NORMALS
// #define CAPS
// #define SHADING_STYLE HARD_NORMAL
// #define USE_GEOSHADER
// #define USE_BACKPATCHCULLING
// #undef USE_BACKPATCHCULLING

// #define TUBES_DATA_TYPE_IS_SSBO
// #define TUBES_BUFFER_SIZE 4096

#if ( SHADING_STYLE == HARD_NORMAL_WF || SHADING_STYLE == BLUE_WF )
	#define CALC_WIREFRAME
#endif

#if ( SHADING_STYLE == HARD_NORMAL || SHADING_STYLE == HARD_NORMAL_WF || SHADING_STYLE == BLUE_WF )
	#define CALC_HARD_NORMALS
#endif


#define float2 vec2
#define float3 vec3
#define float4 vec4

#define float3x3 mat3x3
#define float4x4 mat4x4

float saturate(float x) { return clamp(x, 0.0, 1.0); }
vec2 saturate(vec2 x) { return clamp(x, vec2(0.0), vec2(1.0)); }
vec3 saturate(vec3 x) { return clamp(x, vec3(0.0), vec3(1.0)); }
vec4 saturate(vec4 x) { return clamp(x, vec4(0.0), vec4(1.0)); }

#define lerp(a, b, l) mix(a, b, l)
#define mul(a, b) (a * b)


const float Pi = 3.141592653589793238462643383279502884197169399375105820974944592;
const float Pi2 = Pi * 2.0;
const float Rcp3 = 1.0 / 3.0;


const uint VRingVertexCount = VRING_VERTEX_COUNT;
const uint VRingCount = VRING_COUNT;

const uint BottomCVId = VRingVertexCount * VRingCount;
const uint TopCVId = BottomCVId + 1;

const float TopVRingId_f = float(VRingCount) - 1.0;
const float RcpTopVRingId_f = 1.0 / TopVRingId_f;
const float RcpVRingVertexCount_f = 1.0 / float(VRingVertexCount);
// const float RcpMaxLId = 1.0 / 31.0;

// const uint SegmentSize = 1 + 16;
const uint SegmentSize = 1 + VRingCount / 2;
const uint NodeSize = 4;

layout (std140) uniform StaticBuffer
{ 
	float2 PixelCount;
};

layout (std140) uniform PerFrameBuffer
{ 
    float4x4 ViewProjMat;
	float3 CamPos;
};


#ifdef TUBES_DATA_TYPE_IS_SSBO
	layout (std430) buffer TubesData
	{
		float4 TubesBuffer[];
	};
#else
	layout (std140) uniform TubesData
	{
		float4 TubesBuffer[TUBES_BUFFER_SIZE];
	};
#endif


struct TubeNode
{
	float3 Pos;
	float  Rad;

	float3 PTan;
	float  RTan;
	
	float3 Col;
	uint   BaseLayerId;
	
	float3 CTan;
	float  EndNodeFlag;
};

TubeNode TubeNode_Load(uint off)
{
	float4 v0 = TubesBuffer[off];
	float4 v1 = TubesBuffer[off + 1];
	float4 v2 = TubesBuffer[off + 2];
	float4 v3 = TubesBuffer[off + 3];

	TubeNode node;
	
	node.Pos 			= v0.xyz;
	node.Rad 			= v0.w;
	
	node.PTan 			= v1.xyz;
	node.RTan 			= v1.w;
	
	node.Col 			= v2.xyz;
	// node.BaseLayerId 	= asuint(v2.w);
	node.BaseLayerId 	= 0;
	
	node.CTan 			= v3.xyz;
	node.EndNodeFlag 	= v3.w;
	
	return node;
}

struct Tube
{
	TubeNode Start;
	TubeNode End;
	
	uint BaseLayerId;
	float EndNodeFlag;
};

Tube CreateTestTube()
{
	Tube tube;

	{
		tube.Start.Pos = float3(0.0);
		tube.Start.Rad = 0.3;
		
		tube.Start.PTan = float3(4.0);
		tube.Start.RTan = 4.0;
		
		tube.Start.Col = float3(0.5);
		tube.Start.BaseLayerId = 0;
		
		tube.Start.CTan = float3(6.0, 4.0, 3.0);
		tube.Start.EndNodeFlag = 0.0;
	}
	
	{
		tube.End.Pos = float3(4.0, 0.0, 0.0);
		tube.End.Rad = 0.3;
		
		tube.End.PTan = float3(4.0, 4.0, 0.0);
		tube.End.RTan = -1.0;
		
		tube.End.Col = float3(0.5);
		tube.End.BaseLayerId = 0;
		
		tube.End.CTan = float3(6.0, 4.0, 3.0);
		tube.End.EndNodeFlag = 0.0;
	}
	
	tube.BaseLayerId = 0;
	tube.EndNodeFlag = 0.0;
	
	return tube;
}

Tube Tube_Load(uint off)
{
	// return CreateTestTube();
	
	Tube tube;
	
	tube.Start = TubeNode_Load(off);
	tube.End   = TubeNode_Load(off + NodeSize);
	
	tube.BaseLayerId = tube.Start.BaseLayerId;
	tube.EndNodeFlag = tube.Start.EndNodeFlag;
	
	return tube;
}


float EvalCSpline(float p1, float t1, float p2, float t2, float l)
{
	float h1 = p1 + t1 * Rcp3;
	float h2 = p2 - t2 * Rcp3;
	
	float a1 = lerp(p1, h1, l);
	float a2 = lerp(h1, h2, l);
	float a3 = lerp(h2, p2, l);
	
	float b1 = lerp(a1, a2, l);
	float b2 = lerp(a2, a3, l);
	
	// return lerp(p1, p2, l);
	return lerp(b1, b2, l);
}

float3 EvalCSpline(float3 p1, float3 t1, float3 p2, float3 t2, float l)
{
	float3 h1 = p1 + t1 * Rcp3;
	float3 h2 = p2 - t2 * Rcp3;
	
	float3 a1 = lerp(p1, h1, l);
	float3 a2 = lerp(h1, h2, l);
	float3 a3 = lerp(h2, p2, l);
	
	float3 b1 = lerp(a1, a2, l);
	float3 b2 = lerp(a2, a3, l);
	
	// return lerp(p1, p2, l);
	return lerp(b1, b2, l);
}

float3 EvalCSplineTangent(float3 p1, float3 t1, float3 p2, float3 t2, float l)
{			
	float3 h1 = p1 + t1 * Rcp3;
	float3 h2 = p2 - t2 * Rcp3;
	
	float3 a1 = lerp(p1, h1, l);
	float3 a2 = lerp(h1, h2, l);
	float3 a3 = lerp(h2, p2, l);
	
	float3 b1 = lerp(a1, a2, l);
	float3 b2 = lerp(a2, a3, l);
	
	return (b2 - b1) * 3.0;
}

float EvalCSplineTangent(float p1, float t1, float p2, float t2, float l)
{			
	float h1 = p1 + t1 * Rcp3;
	float h2 = p2 - t2 * Rcp3;
	
	float a1 = lerp(p1, h1, l);
	float a2 = lerp(h1, h2, l);
	float a3 = lerp(h2, p2, l);
	
	float b1 = lerp(a1, a2, l);
	float b2 = lerp(a2, a3, l);
	
	return (b2 - b1) * 3.0;
}

float3 EvalPosCurve(Tube tube, float l)
{
	return EvalCSpline(tube.Start.Pos, tube.Start.PTan, tube.End.Pos, tube.End.PTan, l);
}

float3 EvalPTanCurve(Tube tube, float l)
{
	return EvalCSplineTangent(tube.Start.Pos, tube.Start.PTan, tube.End.Pos, tube.End.PTan, l);
}

float EvalRadCurve(Tube tube, float l)
{
	return EvalCSpline(tube.Start.Rad, tube.Start.RTan, tube.End.Rad, tube.End.RTan, l);
}

float EvalRTanCurve(Tube tube, float l)
{
	return EvalCSplineTangent(tube.Start.Rad, tube.Start.RTan, tube.End.Rad, tube.End.RTan, l);
}

float3 EvalColCurve(Tube tube, float l)
{
	return EvalCSpline(tube.Start.Col, tube.Start.CTan, tube.End.Col, tube.End.CTan, l);
}

float3 ProjToPlane(float3 vec, float3 n)
{
	return vec - n * dot(vec, n) / dot(n, n);
}


float3 CalcSurfaceNormal(Tube tube, float3 ovec, float l)
{
	float delta = 0.001;
	
	float l1 = l - delta;
	float3 p1 = EvalPosCurve(tube, l1);
	float3 t1 = EvalPTanCurve(tube, l1);
	float  r1 = EvalRadCurve(tube, l1); 
	float  dr = EvalRTanCurve(tube, l); 
	
	float3 n1 = ProjToPlane(ovec, t1);
	
	
	float l2 = l + delta;
	float3 p2 = EvalPosCurve( tube, l2);
	float3 t2 = EvalPTanCurve(tube, l2);
	float  r2 = EvalRadCurve( tube, l2); 

	float3 n2 = ProjToPlane(ovec, t2);
	// ovec2 = normalize(ovec2);
	
	float3 surfTan = (p2 + n2 * r2) - (p1 + n1 * r1);
	// surfTan = normalize(surfTan);
	
	// return ovec;
	// return normalize(-t * dr*0.125 + ovec);
	// return normalize((normalize(t + ovec * dr) * (dot(normalize(t + ovec * dr), t)))- t);

	// return normalize(normalize(ovec) - dr * t1 / dot(t1, t1));
	return normalize(ProjToPlane(ovec, surfTan));
}

float RescaleToSSDist(float x)
{
	return x / length(float2(dFdx(x), dFdy(x)));
}

const float Gamma = 2.2;
const float RcpGamma = 1.0 / Gamma;

float3 GammaDecode(float3 col) { return pow(col, float3(Gamma)); }
float3 GammaEncode(float3 col) { return pow(saturate(col), float3(RcpGamma)); }

float SinDot(float2 a, float2 b)
{
	return a.x * b.y - a.y * b.x;
}

int ToInt(bool cond) { return cond ? 1 : 0; }
float ToFloat(bool cond) { return cond ? 1.0 : 0.0; }

float3 CompleteVec(float2 xy)
{
	return float3(xy, sqrt(1.0 - saturate(dot(xy, xy))));
}

#endif